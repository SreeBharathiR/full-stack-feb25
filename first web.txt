<!Doctype html>
<html>
<head>
<title>My Website</title>
</head>
<body>
Hi everyone
</body>
</html>

<p>Hi</p>s
text editor - vs editor

list - two types - order (ol) & unorder (ul)
li - list item

table - table , tr (table row),td (table data), th(table heading)


web page - header, main content, footer
semantic elements - (meaning element) <header>, nav(navigation), footer,main,section

web reader - 


div - container elements
span-inline element

entities & symbols - emojies (win +.)


id- uniques
class- group

CSS - Cascading style sheet


types - inline styling, internal, external file

selectors - 

Universal - * (reset)
simple selector - tag name, id name, class name
combinator selector
attribute
psuedo selector

Box model -

1.content
2.border - style (border width short hand - top right btm left)
3.padding  - gives space within element
4.margin  - gives spaces outside that element


layout - display - block,none, flex, advanced (grid)

position - static(default) , relative, absolute, fixed, sticky

transition - transition-delay, duration,property,timing-funtion

animation - name, duration, delay, timing-function, iteration-count,direction, animation

@keyframes

Media query - responsive 

JavaScript - scripting & programming

v8 engine - js run help

run time environment - browsers, nodejs (outside the browser)

two way to use js in html - internal, external

variable -like a storage container

var - es1, let, const -(es6)

1997 - es1

data type - int a = 5;

1. primitive data type  - Numbers, string,boolean - true, false,undefined,null
2. non primitive data type - objects, arrays, function

operators 
1.arithmetic operators -> +,-,/,*,%,**, uniary operator (++,--)
2.assignment operators -> +=, -=, *=, /=, **=
3.comparision operators -> ==, ===, !=, !==, >, <, >=, <=
4.Logical operators - AND - &&, OR - ||, NOT - !
5.ternary operator  - condition ? true statement : false statement;

Condition statement

1. if
2. if else
3. if elseif else
4. switch case
5. nested if

Loops 

steps - initialization, condition, increment/decrement

1. for Loop
for ( initialization ; condition ; incretment){

}
2. while Loop - dynamic value
3. do while 


problem solving 
1. split
2. input string convert - Number


Function - block of reusable code

1. in built function  - typeof, Number, length
2. user defined function

steps
1. function create
2. function call

return


String - "" (sequence of character), immutable 

create - "",'',``



Sree ->        S r e e
personName ->  0 1 2 3 (index)


methods in string 
1. charAt (old version) (not allowing negative index)
2. at (new ES2022) (allows negative index)
3. chatCodeAt
4. split
5. slice , substring
6. uppercase
7. lowercase
8. replace, replaceAll
9. trim
10. indexOf
11. includes


Arrays - store multiple values in single variable (dynamic in size)

[]

operations

methods

1. length
2. at
3. join
4. spread
5. pop
6. shift
7. unshift
8. concat
9. slice
10. toString
11. splice - index, delete count, new items
12. indexOf
13. includes

advanced

1. sort
2. forEach
3. map
4. filter
5. reduce
6. some
7. every

legacy - old 
syntantic sugar - new version


Object - { rollno:10,age:20,name:"sree"} - unordered

1. Object.values, keys, entries


DOM - Document Object Model

1. listen the element
2. action 
3. reaction

Form validation

DOM task approach


Oops - Object orentied programming

function
factory function 
oops - function constructor


getter & setter

1. Inheritance - single, multilevel, hierarchical, multiple, hybrid
2. Encapsulation - privant & hide
3. Abstraction - hiding implementions
4. Polymorphism - method overloading, method overriding

setTimeOut

setTimeOut(function,delay(ms))

clearTimeOut(timeoutId);

setInterval()

clearInterval()

setInterval(function,interval(ms))

hoisting

localStorage

1. setItem
2. getItem
3. removeItem
4. clear()

currying function

async/await

fetch


bootstrap

open source
front- end framework
designing
grid - responsive designing
js plugins

(design fast development)



ES6 concepts

import export

default export
named export

desturing

callback function

spread operator - ...

rest operator - ...

"React"

page reload -spa

component - reusable, hard code

jsx - html tags

declarative programming


Virtual DOM

steps:

1. First render - First virtual DOM create
2. changes - new virtual Dom create
3. compare both (diffing)
4. update original dom (reconciliation)


React app creation 
2 methods

1. cra (create-react-app)
2. vite(3rd party framework)

npx (node package execute)
npm 

components 

root componnet - App

hooks - state & lifecycle ( 1. creation(mounting) 2. updating (state or prop change) 3. destructuring (unmount))

use__ - prefix


useState


const [state,setState] = useState() - for data types (render)


props - one way ( parent - child)

recieve as object (props, data,values)

receiving types -
1.object
2. destructuring

props drilling 

useEffect - side effect ( no return)
1. continuous render
2. one time
3. condition (dependencies)


props drilling solving methods 

1. Component composition
2. context Api
3. Redux - third party lib


children

wrapper component

Context api
1.create context - createContext
2.values (provider)  - only value (pass as obj)
3.use (useContext)

app stop - ctrl + c


useReducer - state management 

[state, dispatch]=useReducer(reducerFunc,initialState)

useRef 


routing -
 3 things 
1. Browser router
2. Routes
3. Route
